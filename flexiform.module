<?php
/**
 * @file
 * Module for the FlexiformSubmission Entity - a starting point to create your own Entity
 * and associated administration interface
 */

/**
 * Implements hook_hook_info().
 */
function flexiform_hook_info() {
  $hooks['flexiform_group_info'] = array('group' => 'flexiform');
  $hooks['flexiform_submission_access'] = array('group' => 'flexiform');
  $hooks['default_flexiform'] = array('group' => 'flexiform_default');
  $hooks['default_flexiform_alter'] = array('group' => 'flexiform_default');
  return $hooks;
}

/**
 * Implements hook_menu()
 *
 * We want to add a manage form fields tab and a manage form entities tab
 * for each flexiform
 */
function flexiform_menu() {
  $items = array();
  $flexiform = entity_get_info('flexiform_submission');
  foreach($flexiform['bundles'] as $bundle_name => $bundle_info) {
    if (isset($bundle_info['admin'])) {
      // Get the admin path of the flexiform
      $path = $bundle_info['admin']['path'];
      // Different bundles can appear on the same path (e.g. %node_type and
      // %comment_node_type). To allow field_ui_menu_load() to extract the
      // actual bundle object from the translated menu router path
      // arguments, we need to identify the argument position of the bundle
      // name string ('bundle argument') and pass that position to the menu
      // loader. The position needs to be casted into a string; otherwise it
      // would be replaced with the bundle name string.
      if (isset($bundle_info['admin']['bundle argument'])) {
        $bundle_arg = $bundle_info['admin']['bundle argument'];
        $bundle_pos = (string) $bundle_arg;
      }
      else {
        $bundle_arg = $bundle_name;
        $bundle_pos = '0';
      }

      $items["$path/form-fields"] = array(
        'title' => 'Manage form fields',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_manage_form_fields_form', 4),
        'type' => MENU_LOCAL_TASK,
        'weight' => 2,
        'file' => 'flexiform.admin.inc',
        'access arguments' => array('administer flexiforms'),
      );

      $items["$path/form-fields/%flexiform_formfield"] = array(
        'title' => 'Edit Field',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_field_configure_form', 4, 6),
        'file' => 'flexiform.admin.inc',
        'access arguments' => array('administer flexiforms'),
      );

      $items["$path/form-fields/%flexiform_formfield/edit"] = array(
        'title' => 'Configure',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_field_configure_form', 4, 6),
        'file' => 'flexiform.admin.inc',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'access arguments' => array('administer flexiforms'),
      );

      $items["$path/form-fields/%flexiform_formfield/widget-type"] = array(
        'title' => 'Widget type',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_field_widget_type_form', 4, 6),
        'file' => 'flexiform.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer flexiforms'),
      );

      $items["$path/form-fields/%flexiform_formfield/remove"] = array(
        'title' => 'Remove',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_field_remove_form', 4, 6),
        'file' => 'flexiform.admin.inc',
        'type' => MENU_LOCAL_TASK,
        'access arguments' => array('administer flexiforms'),
      );

      $items["$path/form-entities"] = array(
        'title' => 'Manage form entities',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_manage_form_entities_form', 4),
        'type' => MENU_LOCAL_TASK,
        'weight' => 3,
        'file' => 'flexiform.admin.inc',
        'access arguments' => array('administer flexiforms'),
      );

      $items["$path/form-entities/%/remove"] = array(
        'title' => 'Remove',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('flexiform_entity_remove_form', 4, 7),
        'type' => MENU_LOCAL_TASK,
        'weight' => 3,
        'file' => 'flexiform.admin.inc',
        'access arguments' => array('administer flexiforms'),
      );

      if (module_exists('rules_admin')) {
        $items["$path/rules/add-action"] = array(
          'title' => 'Add Action',
          'page callback' => 'drupal_get_form',
          'page arguments' => array('rules_admin_add_reaction_rule', $bundle_info['admin']['real path']),
          'access callback' => TRUE,
          'file' => 'rules_admin.inc',
          'file path' => drupal_get_path('module', 'rules_admin'),
        );
      }
    }
  }

  $items['flexiform_submission/%flexiform_submission'] = array(
    'title' => 'View submission',
    'page callback' => 'flexiform_submission_page_view',
    'page arguments' => array(1),
    'access callback' => 'flexiform_submission_access',
    'access arguments' => array('view', 1),
  );

  // Get Flexiform Pages
  $query = db_select('flexiform', 'f');
  $query->isNotNull('path');
  $query->condition('path', '', '<>');
  $query->fields('f', array('form', 'path'));
  $forms = $query->execute()->fetchAllAssoc('form');

  foreach ($forms as $form => $row) {
    $items[$row->path] = array(
      'title callback' => 'flexiform_page_title',
      'title arguments' => array($form),
      'page callback' => 'flexiform_page_wrapper',
      'page arguments' => array($form),
      'access callback' => TRUE,
      'file' => 'flexiform.pages.inc',
    );
  }

  // Get Flexiform Edit Pages
  $query = db_select('flexiform', 'f');
  $query->isNotNull('edit_path');
  $query->condition('edit_path', '', '<>');
  $query->fields('f', array('form', 'edit_path'));
  $forms = $query->execute()->fetchAllAssoc('form');

  foreach ($forms as $form => $row) {
    $path_bits = explode('/', $row->edit_path);
    $wildcard_key = array_search('%', $path_bits);
    if ($wildcard_key === FALSE) {
      continue;
    }

    $items[$row->edit_path] = array(
      'title callback' => 'flexiform_page_title',
      'title arguments' => array($form, $wildcard_key),
      'page callback' => 'flexiform_page_wrapper',
      'page arguments' => array($form, $wildcard_key),
      'access callback' => TRUE,
      'file' => 'flexiform.pages.inc',
    );
  }

  return $items;
}

/**
 * Implement hook_entity_info().
 *
 * We define two entities here - the actual entity that will hold our domain
 * specific information and an entity that holds information about the different
 * types of entities. See here: http://drupal.org/node/977380 for a discussion on this
 * choice.
 */
function flexiform_entity_info() {
  $return['flexiform_submission'] = array(
    'label' => t('Flexiform Submission'),
    // The entity class and controller class extend the classes provided by the
    // Entity API
    'entity class' => 'FlexiformSubmission',
    'controller class' => 'FlexiformSubmissionController',
    'base table' => 'flexiform_submission',
    'fieldable' => TRUE,
    'entity keys' => array(
        'id' => 'flexiform_submission_id',
        'bundle' => 'form',
    ),
    // Bundles are defined by the flexiforms below
    'bundles' => array(),
    // Bundle keys tell the FieldAPI how to extract information from the bundle objects
    'bundle keys' => array(
      'bundle' => 'form',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'creation callback' => 'flexiform_submission_create',
    'access callback' => 'flexiform_submission_access',
    'module' => 'flexiform',
    // The information below is used by the FlexiformSubmissionUIController (which extends the EntityDefaultUIController)
    'admin ui' => array(
      'path' => 'admin/content/flexiform_submissions',
      'file' => 'flexiform_submission.admin.inc',
      'controller class' => 'FlexiformSubmissionUIController',
      'menu wildcard' => '%flexiform_submission',
    ),
  );

  // The entity that holds information about the entity types
  $return['flexiform'] = array(
    'label' => t('Flexible Form'),
    'entity class' => 'Flexiform',
    'controller class' => 'FlexiformController',
    'base table' => 'flexiform',
    'fieldable' => FALSE,
    'bundle of' => 'flexiform_submission',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'form',
      'label' => 'label',
    ),
    'access callback' => 'flexiform_access',
    'module' => 'flexiform',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/structure/flexiforms',
      'file' => 'flexiform.admin.inc',
      'controller class' => 'FlexiformUIController',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_info_alter().
 *
 * We are adding the info about the flexiforms via a hook to avoid a recursion
 * issue as loading the flexiforms requires the entity info as well.
 *
 * @todo This needs to be improved
 */
function flexiform_entity_info_alter(&$entity_info) {
  foreach (flexiform_get_flexiforms() as $type => $info) {
    $entity_info['flexiform_submission']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/flexiforms/manage/%flexiform',
        'real path' => 'admin/structure/flexiforms/manage/' . $type,
        'bundle argument' => 4,
        'access arguments' => array('administer flexiforms'),
      ),
    );
  }
}

/**
 * Impements hook_ctools_plugin_directory().
 */
function flexiform_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'panelizer' && $plugin_type == 'entity') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_permission().
 */
function flexiform_permission() {
  // We set up permisssions to manage entity types, manage all entities and the
  // permissions for each individual entity
  $permissions = array(
    'administer flexiforms' => array(
      'title' => t('Administer flexiforms'),
      'description' => t('Create and delete fields for flexiforms, and set their permissions.'),
    ),
    'administer flexiform_submissions' => array(
      'title' => t('Administer flexiform_submissions'),
      'description' => t('Edit and delete all flexiform_submissions'),
    ),
  );

  //Generate permissions per flexiform_submission
  foreach (flexiform_get_flexiforms() as $form) {
    $form_name = check_plain($form->form);
    $permissions += array(
      "submit a $form_name flexiform" => array(
        'title' => t('Submit a %form_name Flexiform (create a new submission)', array('%form_name' => $form->label)),
      ),
      "edit own $form_name flexiform submissions" => array(
        'title' => t('Edit own %form_name Flexiform Submissions', array('%form_name' => $form->label)),
      ),
      "edit any $form_name flexiform submission" => array(
        'title' => t('Edit any %form_name Flexiform Submission', array('%form_name' => $form->label)),
      ),
      "view own $form_name flexiform submissions" => array(
        'title' => t('View own %form_name Flexiform Submissions', array('%form_name' => $form->label)),
      ),
      "view any $form_name flexiform submission" => array(
        'title' => t('View any %form_name Flexiform Submissions', array('%form_name' => $form->label)),
      ),
      "delete own $form_name flexiform submissions" => array(
        'title' => t('View own %form_name Flexiform Submissions', array('%form_name' => $form->label)),
      ),
      "delete any $form_name flexiform submission" => array(
        'title' => t('View any %form_name Flexiform Submissions', array('%form_name' => $form->label)),
      ),
    );
  }
  return $permissions;
}

/**
 * Determines whether the given user has access to a flexiform_submission.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create', 'delete'
 *   or just 'edit' (being the same as 'create' or 'update').
 * @param $flexiform_submission
 *   Optionally a flexiform_submission or a flexiform to check access for. If nothing is
 *   given, access for all flexiform_submissions is determined.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 * @return boolean
 *   Whether access is allowed or not.
 */
function flexiform_submission_access($op, $flexiform_submission = NULL, $account = NULL) {
  // Check if the user can administer everything. This always takes precident.
  if (user_access('administer flexiform_submissions', $account)) {
    return TRUE;
  }

  // If the account is NULL use the global user. We deal with this here so that
  // implementations of hook_flexiform_submission_access() always get a user
  // object.
  if ($account === NULL) {
    global $user;
    $account = $user;
  }

  // See if other modules want to influence access.
  $access = module_invoke_all('flexiform_submission_access', $op, $flexiform_submission, $account);

  // Any FALSE responses will always result in a denial.
  if (in_array(FALSE, $access, TRUE)) {
    return FALSE;
  }
  // Otherwise any TRUE response will give access.
  elseif (in_array(TRUE, $access, TRUE)) {
    return TRUE;
  }

  // If no other modules have any response, we'll fall back to our normal
  // access checks.

  // Special case for when adding new submissions.
  if ($op == 'submit') {
    $form_name = $flexiform_submission;
    return user_access("submit a $form_name flexiform", $account);
  }
  elseif (isset($flexiform_submission) && $form_name = $flexiform_submission->form) {
    // If we don't recognise the op, return FALSE.
    if (!in_array($op, array('view','edit','delete'))) {
      return FALSE;
    }
    // Check the user access for this op on this form.
    elseif (user_access("$op any $form_name flexiform submission", $account)) {
      return TRUE;
    }
    elseif ($flexiform_submission->user == $account->uid && user_access("$op own $form_name flexiform submissions", $account)) {
      return TRUE;
    }
  }
}

/**
 * Access callback for the entity API.
 */
function flexiform_access($op, $type = NULL, $account = NULL) {
  return user_access('administer flexiforms', $account);
}

/**
 * Gets an array of all flexiforms, keyed by the type name.
 *
 * @param $type_name
 *   If set, the type with the given name is returned.
 * @return Flexiform[]
 *   Depending whether $type isset, an array of flexiforms or a single one.
 */
function flexiform_get_flexiforms($flexiform_name = NULL) {
  // entity_load will get the Entity controller for our flexiform_submission entity and call the load
  // function of that object - we are loading entities by name here.
  $flexiforms = entity_load_multiple_by_name('flexiform', isset($flexiform_name) ? array($flexiform_name) : FALSE);
  return isset($flexiform_name) ? reset($flexiforms) : $flexiforms;
}

/**
 * Gets an array of all flexiforms with a given base_entity type and bundle.
 *
 * @param string $entity_type
 *   The entity type of base entity.
 * @param string $bundle
 *   The bundle of the base entity.
 *
 * @return array
 *   An array of flexiforms.
 */
function flexiform_get_base_entity_forms($entity_type, $bundle = FALSE) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'flexiform');
  $query->propertyCondition('base_entity', $entity_type);

  if ($bundle) {
    $query->propertyCondition('base_entity_bundle', $bundle);
  }

  $entities = $query->execute();

  if (empty($entities['flexiform'])) {
    return array();
  }

  return entity_load('flexiform', array_keys($entities['flexiform']));
}

/**
 * Menu argument loader; Load a flexiform by string.
 *
 * @param $form
 *   The machine-readable name of a flexiform to load.
 *
 * @return
 *   A flexiform array or FALSE if $type does not exist.
 */
function flexiform_load($form) {
  return flexiform_get_flexiforms($form);
}

/**
 * Fetch a flexiform_submission object. Make sure that the wildcard you choose
 * in the flexiform_submission entity definition fits the function name here.
 *
 * @param $flexiform_submission_id
 *   Integer specifying the flexiform_submission id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $flexiform_submission object or FALSE if it cannot be loaded.
 *
 * @see flexiform_submission_load_multiple()
 */
function flexiform_submission_load($flexiform_submission_id, $reset = FALSE) {
  $flexiform_submissions = flexiform_submission_load_multiple(array($flexiform_submission_id), array(), $reset);
  return reset($flexiform_submissions);
}

/**
 * Load multiple flexiform_submissions based on certain conditions.
 *
 * @param $flexiform_submission_ids
 *   An array of flexiform_submission IDs.
 * @param $conditions
 *   An array of conditions to match against the {flexiform_submission} table.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   An array of flexiform_submission objects, indexed by flexiform_submission_id.
 *
 * @see entity_load()
 * @see flexiform_submission_load()
 */
function flexiform_submission_load_multiple($flexiform_submission_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('flexiform_submission', $flexiform_submission_ids, $conditions, $reset);
}

/**
 * Deletes a flexiform_submission.
 */
function flexiform_submission_delete(FlexiformSubmission $flexiform_submission) {
  $flexiform_submission->delete();
}

/**
 * Delete multiple flexiform_submissions.
 *
 * @param $flexiform_submission_ids
 *   An array of flexiform_submission IDs.
 */
function flexiform_submission_delete_multiple(array $flexiform_submission_ids) {
  entity_get_controller('flexiform_submission')->delete($flexiform_submission_ids);
}

/**
 * Create a flexiform_submission object.
 */
function flexiform_submission_create($values = array()) {
  return entity_get_controller('flexiform_submission')->create($values);
}

/**
 * Saves a flexiform_submission to the database.
 *
 * @param $flexiform_submission
 *   The flexiform_submission object.
 */
function flexiform_submission_save(FlexiformSubmission $flexiform_submission) {
  return $flexiform_submission->save();
}

/**
 * Saves a flexiform to the db.
 */
function flexiform_save(Flexiform $form) {
  $form->save();
}

/**
 * Deletes a flexiform from the db.
 */
function flexiform_delete(Flexiform $form) {
  $form->delete();
}

/**
 * URI callback for flexiform_submissions
 */
function flexiform_submission_uri(FlexiformSubmission $flexiform_submission){
  return array(
    'path' => 'flexiform_submission/' . $flexiform_submission->flexiform_submission_id,
  );
}

/**
 * Menu title callback for showing individual entities
 */
function flexiform_submission_page_title(FlexiformSubmission $flexiform_submission){
  return entity_label('flexiform_submission', $flexiform_submission);
}

/**
 * Sets up content to show an individual flexiform_submission
 * @todo - get rid of drupal_set_title();
 */
function flexiform_submission_page_view($flexiform_submission, $view_mode = 'full') {
  $controller = entity_get_controller('flexiform_submission');
  $content = $controller->view(array($flexiform_submission->flexiform_submission_id => $flexiform_submission));
  //drupal_set_title($flexiform_submission->name);
  return $content;
}

/**
 * Split a namespace into entity and field name
 */
function flexiform_formfield_load($string) {
  return FlexiformElement::splitElementNamespace($string);
}

/**
 * Implements hook_views_api().
 */
function flexiform_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'flexiform') . '/views',
  );
}

/**
 * Implement hook_theme().
 */
function flexiform_theme() {
  return array(
    'flexiform_submission_add_list' => array(
      'variables' => array('content' => array()),
      'file' => 'flexiform_submission.admin.inc',
    ),
    'flexiform_submission' => array(
      'render element' => 'elements',
      'template' => 'flexiform_submission',
    ),
    'flexiform_field_table' => array(
      'render element' => 'elements',
    ),
    'flexiform_entity_table' => array(
      'render element' => 'elements',
    ),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function flexiform_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/structure/flexiform_submissions/add' on 'admin/structure/flexiform_submissions'.
  if ($root_path == 'admin/content/flexiform_submissions') {
    $item = menu_get_item('flexiform');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_element_info().
 */
function flexiform_element_info() {
  return array(
    'flexiform_field_table' => array(
      '#theme' => 'flexiform_field_table',
      '#pre_render' => array('flexiform_field_table_pre_render'),
      '#regions' => array('' => array()),
    ),
    'flexiform_entity_table' => array(
      '#theme' => 'flexiform_entity_table',
      '#pre_render' => array('flexiform_entity_table_pre_render'),
      '#regions' => array('' => array()),
    ),
  );
}

/**
 * Implements hook_field_create_instance().
 *
 * When a field is added to a flexiform_submission bundle add it to that forms form_fields.
 */
function flexiform_field_create_instance($instance) {
  // Only act on fields added to the flexiform_submission entity.
  if ($instance['entity_type'] != 'flexiform_submission') {
    return;
  }

  // Load the flexiform entity
  $flexiform = flexiform_load($instance['bundle']);

  // Construct the form field settings array.
  $form_field = array(
    'type' => 'field',
    'field_name' => $instance['field_name'],
    'entity_namespace' => 'base_entity',
    'instance' => array(
      'label' => $instance['label'],
      'widget' => array(
        'weight' => $intance['widget']['weight'],
      ),
    ),
  );

  // Add the field to the flexiform->elements array.
  $flexiform->elements['base_entity'][$instance['field_name']] = $form_field;

  // Save the flexiform.
  $flexiform->save();
}

/**
 * Retreive a list of flexiform groups.
 */
function flexifrom_get_groups() {
  $groups = &drupal_static(__FUNCTION__, NULL);

  if ($groups === NULL) {
    $groups = module_invoke_all('flexiform_group_info');
  }

  return $groups;
}

//-----------------------------------------------------------------------------
// Flexiform Builder API

/**
 * Get info about all available builders.
 */
function flexiform_builder_info($builder = NULL) {
  $builders = &drupal_static(__FUNCTION__, array());

  if (empty($builders)) {
    if ($cache = cache_get('flexiform:builder_info', 'cache')) {
      $builders = $cache->data;
    }
    else {
      $builders = array();
      foreach (module_implements('flexiform_builder_info') as $module) {
        // Due to http://drupal.org/node/890660 we can't use module_invoke_all()
        // because we need to know the provenance of each set.
        $builders_module = module_invoke($module, 'flexiform_builder_info');
        foreach ($builders_module as $builder_name => $builder_info) {
          $builder_info += array(
            'class' => $builder_name,
            'label' => $builder_name,
            'module' => $module,
            'entity_types' => array(),
          );
          $builders[$builder_name] = $builder_info;
        }
      }

      // Alter the data sets with hook_party_data_set_info_alter().
      drupal_alter('flexiform_builder_info', $builders);

      cache_set('flexiform:builder_info', $builders);
    }
  }

  if (!empty($builder)) {
    return $builders[$builder];
  }

  return $builders;
}

/**
 * Get the builders available for a particular base entity type.
 */
function flexiform_entity_type_get_builders($entity_type) {
  // If this isn't an entity type return false
  if (!entity_get_info($entity_type)) {
    return FALSE;
  }

  $builders = flexiform_builder_info();
  $applicable_builders = array();
  foreach ($builders as $builder => $info) {
    if (empty($info['entity_types'])
      || in_array($entity_type, $info['entity_types'])) {
      $applicable_builders[$builder] = $info;
    }
  }
  return $applicable_builders;
}

/**
 * Implements hook_flexiform_builder_info().
 */
function flexiform_flexiform_builder_info() {
  $builders = array();

  $builders['FlexiformBuilderFlexiform'] = array(
    'class' => 'FlexiformBuilderFlexiform',
    'label' => t('Flexiform Form Builder'),
    'description' => t('The flexiform custom form builder. Use the configuration pages to add fields and entities to the form.'),
  );

  $fieldable_entities = array();
  foreach (entity_get_info() as $entity_type => $info) {
    if ($info['fieldable']) {
      $fieldable_entities[] = $entity_type;
    }
  }
  $builders['FlexiformBuilderEntityForm'] = array(
    'class' => 'FlexiformBuilderEntityForm',
    'label' => t('Entity Field Form'),
    'description' => t('Render the standard entity field form.'),
    'entity_types' => $fieldable_entities,
  );

  return $builders;
}

//-----------------------------------------------------------------------------
// Entity Getter and Setter API

/**
 * Get info about all entity getters
 */
function flexiform_entity_getter_info($getter = NULL) {
  $getters = &drupal_static(__FUNCTION__);

  if (!isset($getters)) {
    if ($cache = cache_get('flexiform:entity_getter_info', 'cache')) {
      $getters = $cache->data;
    }
    else {
      $getters = array();
      foreach (module_implements('flexiform_entity_getter_info') as $module) {
        // Due to http://drupal.org/node/890660 we can't use module_invoke_all()
        // because we need to know the provenance of each set.
        $getters_module = module_invoke($module, 'flexiform_entity_getter_info');
        foreach ($getters_module as $getter_name => $getter_info) {
          $getter_info += array(
            'params' => array(),
            'getter callback' => 'flexiform_entity_getter_' . $getter_name,
            'setter callback' => 'flexiform_entity_setter_' . $getter_name,
            'file' => $module . '.flexiform.inc',
            'module' => $module,
          );
          $getters[$getter_name] = $getter_info;
        }
      }

      // Alter the data sets with hook_party_data_set_info_alter().
      drupal_alter('flexiform_entity_getter_info', $getters);

      cache_set('flexiform:entity_getter_info', $getters);
    }
  }

  if (!empty($getter)) {
    return $getters[$getter];
  }

  return $getters;
}

/**
 * Get the getters for a particular entity type
 */
function flexiform_entity_type_get_getters($entity_type) {
  // If this isn't an entity type return false
  if (!entity_get_info($entity_type)) {
    return FALSE;
  }

  $getters = flexiform_entity_getter_info();
  $applicable_getters = array();
  foreach ($getters as $getter => $info) {
    if (in_array($entity_type, $info['entity_types'])) {
      $applicable_getters[$getter] = $info;
    }
  }
  return $applicable_getters;
}

/**
 * Define standard entity getters. Entity getters are used by flexiform to load
 * entities into the flexiform entity stack. Once a flexiform submission has
 * been saved, entities with explicit ID's are loaded based on which entities
 * were submitted when the submission was originally created.
 *
 * Each getter has the following keys
 * - label (required) : A human readable name for the getter
 * - description : A Description of the getter
 * - entity_types (required) : An array of entity types this getter can return
 * - file : Which file is the getter in
 * - params : An array of parameters for the getter keyed by variable name with the
 *   following keys
 *   - type : What type of parameter to expect. If set to entity, this will display
 *     a drop down of the entities already in the forms stack
 *   - entity_type : What type of entity to expect
 * - callback : the name of the function to call for the getter (defaults to
 *   flexiform_entity_getter_$getterkey
 */
function flexiform_flexiform_entity_getter_info() {
  $getters = array();

  // Base entity getter.
  $getters['base_entity'] = array(
    'label' => 'Base Entity',
    'description' => 'The Base Entity for this Flexiform',
    'entity_types' => array_keys(entity_get_info()),
    'file' => 'includes/flexiform.flexiform.inc',
  );

  // User Getters
  $getters['user_current_user'] = array(
    'label' => 'Current User',
    'description' => 'Load the current user into the Form',
    'entity_types' => array('user'),
    'file' => 'user.flexiform.inc',
  );

  // Profile2 Getters
  if (module_exists('profile2')) {
    $getters['profile2_profile_from_user'] = array(
      'label' => 'Profile2 from User',
      'description' => 'Load a Profile 2 Basede on a User',
      'params' => array(
        'user' => array(
          'entity_type' => 'user',
        ),
      ),
      'entity_types' => array('profile2'),
      'file' => 'profile2.flexiform.inc',
    );
  }

  // Party Getters.
  if (module_exists('party')) {
    // Getters for data sets.
    foreach (party_get_data_set_info() as $data_set_name => $info) {
      $getters[$data_set_name . '_from_party'] = array(
        'label' => t('@label data set', array('@label' => $info['label'])),
        'description' => t('Load a data set from a party.'),
        'data_set_name' => $data_set_name,
        'getter callback' => 'flexiform_entity_getter_party_data_set',
        'setter callback' => 'flexiform_entity_setter_party_data_set',
        'params' => array(
          'party' => array(
            'entity_type' => 'party',
          ),
        ),
        'entity_types' => array($info['entity type']),
        'file' => 'party.flexiform.inc',
      );
    }

    // Party from user Getters
    $getters['party_from_user'] = array(
      'label' => 'Party from User',
      'description' => 'Load a Party Based on a User',
      'params' => array(
        'user' => array(
          'entity_type' => 'user',
        ),
      ),
      'entity_types' => array('party'),
      'file' => 'party.flexiform.inc',
    );
  }

  return $getters;
}

//-----------------------------------------------------------------------------
// Flexiform Element API

/**
 * Get information about flexiform elements.
 */
function flexiform_element_info($entity_type = '', $bundle = '', $name = '') {
  $elements = &drupal_static(__FUNCTION__);

  if (!isset($elements)) {
    if ($cache = cache_get('flexiform:element_info', 'cache')) {
      $elements = $cache->data;
    }
    else {
      $elements = array();
      $elements = module_invoke_all('flexiform_element_info');

      // Make sure the entity_type, bundle and name are set.
      foreach ($elements as $entity_type_ => $elems) {
        foreach ($elems as $bundle_ => $els) {
          foreach ($els as $name_ => $element) {
            $elements[$entity_type_][$bundle_][$name_] += array(
              'entity_type' => $entity_type_,
              'bundle' => $bundle_,
              'name' => $name_,
            );
          }
        }
      }

      // Alter the data sets with hook_party_data_set_info_alter().
      drupal_alter('flexiform_element_info', $elements);

      cache_set('flexiform:element_info', $elements);
    }
  }

  if (!empty($entity_type)) {
    if (!empty($bundle)) {
      if (!empty($name)) {
        return $elements[$entity_type][$bundle][$name];
      }
      return $elements[$entity_type][$bundle];
    }
    return $elements[$entity_type];
  }

  return $elements;
}

/**
 * Define elements for use in flexiforms that use the FlexiformBuilderFlexiform
 * form builder.
 *
 * Elements should be defined in a multi-dimensional array keyed by entity
 * type, bundle and name.
 *
 * Each element definition should be an array with at least the following keys:
 * - label: The human readable label for the element, this can usually be
 *     overridden once the element is in a form.
 * - class: The Element class to use for the rendering of the element.
 *
 * The whole definition for an element will be passed to the element
 * constructor so it is possible to store other settings in this array as
 * necessary.
 */
function flexiform_flexiform_element_info() {
  $elements = array();

  // Get the element for all nested flexiforms.
  $forms = db_select('flexiform', 'f')
    ->fields('f', array('label', 'form', 'base_entity', 'base_entity_bundle'))
    ->execute()
    ->fetchAllAssoc('form');

  foreach ($forms as $form) {
    $elements[$form->base_entity][$form->base_entity_bundle][$form->form] = array(
      'label' => $form->label,
      'class' => 'FlexiformElementFlexiform',
    );
  }

  // Get all the field elements.
  $fields_info = field_info_instances();
  foreach ($fields_info as $entity_type => $entity_fields) {
    foreach ($entity_fields as $bundle => $bundle_fields) {
      foreach ($bundle_fields as $field_name => $instance) {
        $elements[$entity_type][$bundle][$field_name] = array(
          'label' => $instance['label'],
          'class' => 'FlexiformElementField',
        );
      }
    }
  }

  return $elements;
}
