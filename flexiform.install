<?php

/**
 * @file
 * Sets up the base table for our entity and a table to store information about
 * the entity types.
 */


/**
 * Implements hook_schema().
 */
function flexiform_schema() {
  $schema = array();

  $schema['flexiform_submission'] = array(
    'description' => 'The base table for flexiform_submission entities.',
    'fields' => array(
      'flexiform_submission_id' => array(
        'description' => 'Primary Key: Identifier for a flexiform_submission.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'form' => array(
        'description' => 'The {flexiform}.form of this flexiform_submission.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'language' => array(
        'description' => 'The language of the flexiform_submission.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the flexiform_submission was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the flexiform_submission was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'user' => array(
        'description' => 'The User whoe created this submission',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'entities' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of entities involved in this flexiform.',
      ),
    ),
    'primary key' => array('flexiform_submission_id'),
    'indexes' => array(
      'type' => array('form'),
    ),
  );

  $schema['flexiform'] = array(
    'description' => 'Stores information about defined flexiforms.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique flexiform identifier.',
      ),
      'form' => array(
        'description' => 'The machine-readable name of this flexiform.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human-readable name of this flexiform.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'form_group' => array(
        'description' => 'The group that this flexiform belongs to.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'general',
      ),
      'builder' => array(
        'description' => 'The builder class for this form',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => 'FlexiformBuilderFlexiform',
      ),
      'base_entity' => array(
        'description' => 'The base entity type of the form.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'base_entity_bundle' => array(
        'description' => 'The base entity type of the form.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'advanced' => array(
        'description' => 'Select the type of form that is submitted. 0 for simple, 1 for complex/advanced',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'The weight of this flexiform in relation to others.',
      ),
      'entities' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of entities involved in this flexiform.',
      ),
      'elements' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'A serialized array of elements related to this flexiform.',
      ),
      'path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The path to a new submission of this form.',
      ),
      'edit_path' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'description' => 'The path to an edit version of this form.',
      ),
    ) + entity_exportable_schema_fields(),
    'primary key' => array('id'),
    'unique keys' => array(
      'form' => array('form'),
    ),
  );

  return $schema;
}

function flexiform_update_7001() {
  $spec = array(
    'description' => 'Select the type of form that is submitted. 0 for simple, 1 for complex/advanced',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );

  db_add_field('flexiform', 'advanced', $spec);
}

/**
 * Add the group field to flexiforms.
 */
function flexiform_update_7002() {
  $spec = array(
    'description' => 'The group that this flexiform belongs to.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => 'general',
  );
  $keys = array(
    'indexes' => array(
      'form_group' => array('form_group'),
    ),
  );
  db_add_field('flexiform', 'form_group', $spec, $keys);
}

/**
 * Add the base_entity and base_entity_bundle.
 */
function flexiform_update_7003() {
  db_add_field('flexiform', 'base_entity', array(
    'description' => 'The base entity type of the form.',
    'type' => 'varchar',
    'length' => 128,
    'not null' => TRUE,
    'default' => '',
  ),
  array(
    'indexes' => array(
      'base_entity' => array('base_entity'),
    ),
  ));

  db_add_field('flexiform', 'base_entity_bundle', array(
    'description' => 'The base entity type of the form.',
    'type' => 'varchar',
    'length' => 128,
    'not null' => TRUE,
    'default' => '',
  ));

  db_change_field('flexiform', 'fields', 'elements', array(
    'type' => 'text',
    'not null' => FALSE,
    'size' => 'big',
    'serialize' => TRUE,
    'description' => 'A serialized array of elements related to this flexiform.',
  ));

  // Update existing flexiform configurations.
  db_update('flexiform')
    ->fields(array(
      'base_entity' => 'flexiform_submission',
    ))
    ->expression('base_entity_bundle', 'form')
    ->execute();
}

/**
 * Add the path fields to the flexiform table.
 */
function flexiform_update_7004() {
  db_add_field('flexiform', 'path', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'description' => 'The path to a new submission of this form.',
  ));

  db_add_field('flexiform', 'edit_path', array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => FALSE,
    'description' => 'The path to an edit version of this form.',
  ));

  db_update('flexiform')
    ->expression('path', "CONCAT('flexiform/', form)")
    ->expression('edit_path', "CONCAT('flexiform/', form, '/%')")
    ->execute();
}

/**
 * Add the builder field to flexiform.
 */
function flexiform_update_7005() {
  db_add_field('flexiform', 'builder', array(
    'description' => 'The builder class for this form',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => 'FlexiformFlexiform',
  ));

  // Update existing flexiform configurations.
  db_update('flexiform')
    ->fields(array(
      'builder' => 'FlexiformBuilderFlexiform',
    ))
    ->execute();
}

/**
 * Convert forms to the new format.
 */
function flexiform_update_7006() {
  $flexiforms = entity_load('flexiform');

  foreach ($flexiforms as $flexiform) {
    $flexiform_elements = $flexiform->elements;
    $flexiform->elements = array();

    foreach ($flexiform_elements as $entity_namespace => $elements) {
      foreach ($elements as $element_name => $settings) {
        $type = $settings['type'];
        $class_name = 'FlexiformElement'.ucfirst($type);

        unset($settings['type']);

        $settings['element_name'] = $element_name = $type . ':' . $element_name;
        $settings['enitity_namespace'] = $entity_namespace;

        $element = new $class_name($flexiform, $settings);
        $flexiform->addElement($element);
      }
    }

    $flexiform->save();
  }
}
